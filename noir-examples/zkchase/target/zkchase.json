{"noir_version":"0.32.0+c679f01a19b02ad2ac2287c8e699b46887f7872c","hash":15807912845410565985,"abi":{"parameters":[{"name":"map0","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]},"visibility":"public"},{"name":"map1","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]},"visibility":"public"},{"name":"prev_pos_hash","type":{"kind":"field"},"visibility":"public"},{"name":"prev_pos","type":{"kind":"field"},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"23":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"53":{"source":"// \n// \n// \n\n// This is an \nglobal COLS = 18;\nglobal ROWS = 14;\n\nfn sq(x: Field) -> Field {\n    x * x\n}\n\nfn cu(x: Field) -> Field {\n    x * x * x\n}\n\n// hashes two inputs\nfn hash(val: Field, salt: Field) -> Field {\n    // let mut slt = salt as u64;\n    // let val = val as u64;\n    let salts = [\n        0xf8bf3bd6c22ba3b1bf3ab2e3fb40818cd4217ffbaf294ca42331d4e3043a0a6,\n        0x388c9fcf30fc2841d648f46bad01dd10bee9dc184d25eabc9f617021109cec3,\n        0x2bb7f397c5941ac67befa8b232f15c8853dac263da793555441a90cec83b6454,\n        0x17f389b52f9ea7a98874a4a31ef6a7beb43fb17db0e499250bb3f0181c59fb21,\n        0x3a2090eacb897a31fb10561d560a9aeec24b7ad14d17b145f20c875a0b28c7c,\n        0xc398534f0eb580f1fe4bf64553389e67cca4714399430e09619dcbee17ba099,\n        0x7095ac9fda46afa7f181259e3635feffa7f11ee63f3ee777a5cebf4822328c4,\n        0x2046f7cf1c8f13ef2b69cbc8bc0d5d809f82568abe2b33d1cd060958b1ced683,\n    ];\n\n    let v = val * salts[0];\n    let v = v * v * v * (salt + salts[1]); // v ** 3\n    let v = sq(sq(v)) * v * (salt + salts[2]); // v ** 5\n    let v2 = sq(v);\n    let v = cu(v2) * v * (salt + salts[3]); // v ** 7\n    let v2 = sq(v);\n    let v4 = sq(v2);\n    let v = sq(v4) * v2 * v * (salt + salts[5]); // v ** 11\n    let v4 = sq(sq(v));\n    let v = cu(v4) * v * (salt + salts[6]); // v ** 13\n    let v = sq(sq(sq(sq(v)))) * v * (salt + salts[7]); // v ** 17\n    let v2 = sq(v);\n    let v = sq(sq(sq(v2))) * v2 * v * (salt + salts[7]); // v ** 19\n\n    v\n}\n\nfn expand_position(position: Field) -> (u8, u8) {\n    let pos_bytes = position.to_be_bytes(2);\n    let mut px = pos_bytes[0];\n    let mut py = pos_bytes[1];\n    (px, py)\n}\n\nfn compress_position(x: u8, y: u8) -> Field {\n    (x as u64 + y as u64 * 256 as u64) as Field\n}\n\nfn make_move(prev_pos: Field, move: u8) -> (u8, u8) {\n    let (mut px, mut py) = expand_position(prev_pos);\n\n    if move == 1 {\n        py += 1;\n    } else if move == 2 {\n        py -= 1;\n    } else if move == 3 {\n        px -= 1;\n    } else if move == 4 {\n        px += 1;\n    } else {\n        assert(false, \"Invalid move\");\n    }\n    (py, px)\n}\n\n// Get map bit at x, y\nfn map_bit(map0: U128, map1: U128, x: u8, mut y: u8) -> u8 {\n    let mut map = map0;\n    let mut bit = y * COLS + x;\n    // print(x);\n    // print(\" \");\n    // print(y);\n    // print(\" \");\n    // print(bit);\n    // print(\" \");\n\n    // print(\"bit[ \");\n    // print(bit);\n\n    // We have a map in two U128, m0 and m1\n    // determine which one to use base on the row (y)\n    if bit > 125 {\n        bit = bit - 126;\n        map = map1;\n    }\n    // Now use map.lo or map.hi if bit value to fetch is greater than 63\n    let mut map_part = map.lo as u64;\n    let mut total_bits: u8 = 63;\n    // print(\" ~ \");\n    // print(bit);\n    // print(\" \");\n    if bit > 63 {\n        map_part = map.hi as u64;\n        bit -= 64;\n        total_bits = 61;\n    }\n\n    // bits to drop, everything after the reqd bit\n    let mut drop_bits = bit;\n    // print(\" ] \");\n    let divide_drop_bits: u64 = 1 as u64 << (drop_bits as u8);\n    // divide by power of two to drop lower bits\n    let remainder_map = map_part / divide_drop_bits as u64;\n    // drop higher bits\n    let bit = remainder_map % 2;\n\n    // print(\"map: \");\n    // print(map_part);\n    // print(\" bit: \");\n    // print(bit);\n\n    bit as u8\n}\n\n// Main game circuit\n// map: public for Cairo contract to assert equivalence\n//      and that bushes are correct places in Cairo and the circuit\n// prev_pos_hash: public for Cairo contract to compare against the prev pos\n// prev_pos: private previous position (before playing move)\n// move: between 1, 2, 3, 4 for moving UP, DOWN, LEFT, RIGHT\n// salt: for hashing\n// returns: public new position hash output for Cairo contract to store in state for next iteration\nfn main(\n    map0: pub U128,\n    map1: pub U128,\n    prev_pos_hash: pub Field,\n    prev_pos: Field,\n    move: u8,\n    salt: Field //\n) -> pub Field {\n    // public for Cairo contract assert equivalence\n    // To make sure bushes are same in Cairo and the circuit\n\n    // Step 1: Output prev public hash\n    assert(hash(prev_pos, salt) == prev_pos_hash);\n\n    // Step 2: Process move\n    let (x, y) = make_move(prev_pos, move);\n\n    // Step 3: Assert move is in the bush\n    let bush = map_bit(map0, map1, x, y);\n    assert(1 == bush);\n\n    // Step 4: Output new public hash\n    let pos = compress_position(x, y);\n\n    hash(pos, salt)\n}\n\nmod test {\n    use crate::{main, map_bit, hash};\n    /*\n     000110011100110000\n     001110011100111000\n     001110000000011110\n     001100111111001111\n     011101111111100111\n     111001110011100000\n     110001100001100000\n    */\n    global MAP1 = U128::from_integer(8572555389858747807877673192308021344);\n\n    /*\n     000001100001100011\n     000001110011100111\n     111001111111101110\n     111100111111001100\n     011110000000011100\n     000111001110011100\n     000011001110011000\n    */\n    global MAP0 = U128::from_integer(2025978491129711385918832679433810840);\n\n    #[test]\n    fn test_bush() {\n        let rows = [\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],\n            [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],\n            [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n            [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n            [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],\n            [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\n            [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1],\n            [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1],\n            [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],\n            [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n            [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],\n            [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0]\n        ];\n\n        for y in 0..14 {\n            // println(\"\");\n            // print(\"printing row: \");\n            // println(y);\n            let row = rows[y];\n            for i in 0..18 {\n                // let i = 17 - i;\n                // print(i);\n                // print(\" : \");\n                let bit = map_bit(MAP0, MAP1, i, y);\n                // print(bit);\n                if bit == row[i] {\n                    // print(\" == \");\n                } else {\n                    // print(\" != \");\n                }\n                // println(row[i]);\n                // assert(row[17 - i] == bit);\n            }\n        }\n    }\n\n    #[test]\n    fn test_main() {\n        let salt = 2134924215;\n\n        let prev_pos = 0x705;\n        let prev_pos_hash = hash(prev_pos, salt);\n        // print(\"post_hash: \");\n        // println(hash(0x704, salt));\n        let move = 2;\n        let result = main(MAP1, MAP0, prev_pos_hash, prev_pos, move, salt);\n        assert(result == hash(0x704, salt));\n    }\n}\n","path":"/Users/shramee/www/starknet/noir-r1cs/noir-examples/zkchase/src/main.nr"}},"names":["main"]}