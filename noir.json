{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":10390112263486795119,"abi":{"parameters":[{"name":"map0","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]},"visibility":"public"},{"name":"map1","type":{"kind":"struct","path":"std::uint128::U128","fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}]},"visibility":"public"},{"name":"prev_pos_hash","type":{"kind":"field"},"visibility":"public"},{"name":"prev_pos","type":{"kind":"field"},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"47":{"source":"global COLS = 18;\nglobal ROWS = 14;\n\nfn sq(x: Field) -> Field {\n    x * x\n}\n\nfn cu(x: Field) -> Field {\n    x * x * x\n}\n\n// hashes two inputs\nfn hash(val: Field, salt: Field) -> Field {\n    // let mut slt = salt as u64;\n    // let val = val as u64;\n    let salts = [\n        0xf8bf3bd6c22ba3b1bf3ab2e3fb40818cd4217ffbaf294ca42331d4e3043a0a6,\n        0x388c9fcf30fc2841d648f46bad01dd10bee9dc184d25eabc9f617021109cec3,\n        0x2bb7f397c5941ac67befa8b232f15c8853dac263da793555441a90cec83b6454,\n        0x17f389b52f9ea7a98874a4a31ef6a7beb43fb17db0e499250bb3f0181c59fb21,\n        0x3a2090eacb897a31fb10561d560a9aeec24b7ad14d17b145f20c875a0b28c7c,\n        0xc398534f0eb580f1fe4bf64553389e67cca4714399430e09619dcbee17ba099,\n        0x7095ac9fda46afa7f181259e3635feffa7f11ee63f3ee777a5cebf4822328c4,\n        0x2046f7cf1c8f13ef2b69cbc8bc0d5d809f82568abe2b33d1cd060958b1ced683,\n    ];\n\n    let v = val * salts[0];\n    let v = v * v * v * (salt + salts[1]); // v ** 3\n    let v = sq(sq(v)) * v * (salt + salts[2]); // v ** 5\n    let v2 = sq(v);\n    let v = cu(v2) * v * (salt + salts[3]); // v ** 7\n    let v2 = sq(v);\n    let v4 = sq(v2);\n    let v = sq(v4) * v2 * v * (salt + salts[5]); // v ** 11\n    let v4 = sq(sq(v));\n    let v = cu(v4) * v * (salt + salts[6]); // v ** 13\n    let v = sq(sq(sq(sq(v)))) * v * (salt + salts[7]); // v ** 17\n    let v2 = sq(v);\n    let v = sq(sq(sq(v2))) * v2 * v * (salt + salts[7]); // v ** 19\n\n    v\n}\n\nfn expand_position(position: Field) -> (u8, u8) {\n    let pos_bytes = position.to_be_bytes(2);\n    let mut px = pos_bytes[0];\n    let mut py = pos_bytes[1];\n    (px, py)\n}\n\nfn compress_position(x: u8, y: u8) -> Field {\n    (x as u64 + y as u64 * 256 as u64) as Field\n}\n\nfn make_move(prev_pos: Field, move: u8) -> (u8, u8) {\n    let (mut px, mut py) = expand_position(prev_pos);\n\n    if move == 1 {\n        py += 1;\n    } else if move == 2 {\n        py -= 1;\n    } else if move == 3 {\n        px -= 1;\n    } else if move == 4 {\n        px += 1;\n    } else {\n        assert(false, \"Invalid move\");\n    }\n    (py, px)\n}\n\n// Get map bit at x, y\nfn map_bit(map0: U128, map1: U128, x: u8, mut y: u8) -> u8 {\n    let mut map = map0;\n    let mut bit: u8 = y * COLS + x;\n    // print(x);\n    // print(\" \");\n    // print(y);\n    // print(\" \");\n    // print(bit);\n    // print(\" \");\n\n    // print(\"bit[ \");\n    // print(bit);\n\n    // We have a map in two U128, m0 and m1\n    // determine which one to use base on the row (y)\n    if bit > 125 {\n        bit = bit - 126;\n        map = map1;\n    }\n    // Now use map.lo or map.hi if bit value to fetch is greater than 63\n    let mut map_part = map.lo as u64;\n    let mut total_bits: u8 = 63;\n    // print(\" ~ \");\n    // print(bit);\n    // print(\" \");\n    if bit > 63 {\n        map_part = map.hi as u64;\n        bit -= 64;\n        total_bits = 61;\n    }\n\n    // bits to drop, everything after the reqd bit\n    let mut drop_bits = bit;\n    // print(\" ] \");\n    let divide_drop_bits: u64 = 1 as u64 << (drop_bits);\n    // divide by power of two to drop lower bits\n    let remainder_map = map_part / divide_drop_bits as u64;\n    // drop higher bits\n    let bit = remainder_map % 2;\n\n    // print(\"map: \");\n    // print(map_part);\n    // print(\" bit: \");\n    // print(bit);\n\n    bit as u8\n}\n\n// Main game circuit\n// map: public for Cairo contract to assert equivalence\n//      and that bushes are correct places in Cairo and the circuit\n// prev_pos_hash: public for Cairo contract to compare against the prev pos\n// prev_pos: private previous position (before playing move)\n// move: between 1, 2, 3, 4 for moving UP, DOWN, LEFT, RIGHT\n// salt: for hashing\n// returns: public new position hash output for Cairo contract to store in state for next iteration\nfn main(\n    map0: pub U128,\n    map1: pub U128,\n    prev_pos_hash: pub Field,\n    prev_pos: Field,\n    move: u8,\n    salt: Field //\n) -> pub Field {\n    // public for Cairo contract assert equivalence\n    // To make sure bushes are same in Cairo and the circuit\n\n    // Step 1: Output prev public hash\n    assert(hash(prev_pos, salt) == prev_pos_hash);\n\n    // Step 2: Process move\n    let (x, y) = make_move(prev_pos, move);\n\n    // Step 3: Assert move is in the bush\n    let bush = map_bit(map0, map1, x, y);\n    assert(1 == bush);\n\n    // Step 4: Output new public hash\n    let pos = compress_position(x, y);\n\n    hash(pos, salt)\n}\n\nmod test {\n    use crate::{main, map_bit, hash};\n    /*\n     000110011100110000\n     001110011100111000\n     001110000000011110\n     001100111111001111\n     011101111111100111\n     111001110011100000\n     110001100001100000\n    */\n    global MAP1 = U128::from_integer(8572555389858747807877673192308021344);\n\n    /*\n     000001100001100011\n     000001110011100111\n     111001111111101110\n     111100111111001100\n     011110000000011100\n     000111001110011100\n     000011001110011000\n    */\n    global MAP0 = U128::from_integer(2025978491129711385918832679433810840);\n\n    #[test]\n    fn test_bush() {\n        let rows = [\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],\n            [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],\n            [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n            [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n            [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],\n            [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\n            [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1],\n            [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1],\n            [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],\n            [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n            [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],\n            [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0]\n        ];\n\n        for y in 0..14 {\n            // println(\"\");\n            // print(\"printing row: \");\n            // println(y);\n            let row = rows[y];\n            for i in 0..18 {\n                // let i = 17 - i;\n                // print(i);\n                // print(\" : \");\n                let bit = map_bit(MAP0, MAP1, i, y);\n                // print(bit);\n                if bit == row[i] {\n                    // print(\" == \");\n                } else {\n                    // print(\" != \");\n                }\n                // println(row[i]);\n                // assert(row[17 - i] == bit);\n            }\n        }\n    }\n\n    #[test]\n    fn test_main() {\n        let salt = 2134924215;\n\n        let prev_pos = 0x705;\n        let prev_pos_hash = hash(prev_pos, salt);\n        // print(\"post_hash: \");\n        // println(hash(0x704, salt));\n        let move = 2;\n        let result = main(MAP1, MAP0, prev_pos_hash, prev_pos, move, salt);\n        assert(result == hash(0x704, salt));\n    }\n}\n","path":"/Users/shramee/www/starknet/zk-chase/zk-circuits/noir/src/main.nr"}},"names":["main"]}